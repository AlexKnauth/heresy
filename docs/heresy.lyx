#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Heresy Programming Language
\end_layout

\begin_layout Author
John S.
 Berry III
\end_layout

\begin_layout Abstract
The Heresy language is a functional Lisp/Scheme dialect implemented in Racket,
 with syntax inspired by the BASIC family of programming languages.
 It's principle goals are to provide a simple core language for BASIC and
 other programmers to experiment with and learn how to program functionally.
 This document will detail the general philosophy of the Heresy language,
 such as exists, as well as the language syntax and functions.
 
\begin_inset Newline newline
\end_inset

The Heresy language was created by John S.
 Berry III with additional contributions from many others in the Racket
 community.
 
\begin_inset Newline newline
\end_inset

Heresy and this documentation are Copyright (c) 2014 John S.
 Berry III and released under the terms of the GNU LGPL.
\end_layout

\begin_layout Section
The Heresy Rules
\end_layout

\begin_layout Standard
The Heresy language is developed according to a few basic "ground rules,"
 which the author and contributors attempt to follow in developing new features
 and functions for the language.
 These are as follows:
\end_layout

\begin_layout Enumerate

\series bold
Heresy is BASIC
\series default
 - Heresy is inspired by BASIC, and aims to be at least somewhat easy for
 BASIC programmers to learn.
 Mostly this means we prefer BASIC names for functions over the Lisp name,
 and naming conventions like the $ for string functions.
\end_layout

\begin_layout Enumerate

\series bold
Heresy is a Lisp
\series default
 - Heresy is still a Lisp, and loves simple syntax and s-expressions.
 While it makes use of some sugaring like literal keywords for certain common
 primitives, these are best used sparingly.
 Heresy is the Diet Coke of Evil, just one calorie, not quite evil enough.
\end_layout

\begin_layout Enumerate

\series bold
Heresy is functional 
\series default
- Functional, but not Haskell.
 It is not intended solely as a vehicle for absolute functional purity.
 I love Haskell.
 You love Haskell.
 We don’t need to write another Haskell.
 Think more in terms of a lower-calorie, more intelligible Clojure.
\end_layout

\begin_layout Enumerate

\series bold
Heresy is for learning
\series default
 - Heresy started as a learning project, a chance to learn how Lisp and
 functional programming really work on a practical level.
 I hope that, in time, it can be that for others as well, especially those
 who grew up with BASIC like myself and still sometimes struggle to get
 their head around the functional style.
 In particular, this means the Heresy-written portions of the source are
 generally written in as clear a manner as possible, as they are intended
 to be self-teaching.
\end_layout

\begin_layout Enumerate

\series bold
Heresy is an experiment
\series default
 - Heresy is an experimental language.
 It’s very DNA is as a mad idea that came to life, and it’s development
 should be ready and willing to embrace new mad ideas and run with them.
 This is where carry came from, and I hope to have more mad ideas in the
 future.
\end_layout

\begin_layout Enumerate

\series bold
Heresy is for everyone
\series default
 - As a statement of culture, the Heresy community welcomes the contribution
 of all people, who taste equally delicious to the jaws of mighty Cthulhu.
 No discrimination, harassment, or any other mistreatment of contributors
 on the basis of age, race, sexuality, or gender will 
\series bold
ever
\series default
 be tolerated by myself or anyone else who wishes to be part of this project.
\end_layout

\begin_layout Section
Heresy Syntax and Conventions
\end_layout

\begin_layout Standard
Generally speaking, Heresy follows standard s-expression syntax as expected
 from any Lisp, being composed of parenthesized sequences of terms in Polish
 notation.
 Each sequence thus begins with an operator or function, and any number
 of arguments or additional s-expressions as needed.
\end_layout

\begin_layout Standard
There are however a few exceptions to usual expectations in the case of
 certain special forms like for, def, and if.
 These make use of additional literal terms as part of their syntax, to
 provide more clarity and similarity to BASIC-style syntax.
\end_layout

\begin_layout Standard
In accordance with that goal, Heresy also follows certain naming conventions
 as a matter of style.
 Functions which produce a string value are appended with $, and in general
 where a naming conflict between two similar functions in Racket/Scheme
 and BASIC exists, prefer BASIC.
\end_layout

\begin_layout Standard
When borrowing BASIC syntax and naming for use in Heresy, the author has
 generally relied chiefly on QBASIC and ECMA BASIC for reference.
\end_layout

\begin_layout Section
Heresy Reference
\end_layout

\begin_layout Subsection
Declarations
\end_layout

\begin_layout LyX-Code
(def 
\emph on
name value
\emph default
)
\end_layout

\begin_layout Standard
Defines a new variable of 
\emph on
name
\emph default
 with the given 
\emph on
value.
\end_layout

\begin_layout LyX-Code
(def
\series bold
 
\series default
fn 
\emph on
name 
\emph default
([
\emph on
arg
\emph default
 ...]) 
\emph on
body
\emph default
 ...)
\end_layout

\begin_layout Standard
Defines a function of 
\emph on
name
\emph default
, which when called evaluates its body expressions with the given list of
 arguments bound to local variables for use in the body of the function's
 definition.
 Note that there are a number of additional options here for defining arguments.
 Default values can be ascribed to an argument by enclosing it in additional
 parentheses:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> (define foo (x (y 1)) (+ x y))
\end_layout

\begin_layout Plain Layout

> (foo 3 4)
\end_layout

\begin_layout Plain Layout

7
\end_layout

\begin_layout Plain Layout

> (foo 5)
\end_layout

\begin_layout Plain Layout

6
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Two patterns as well exist for taking an arbitrary number of values.
 The argument names list can be forgone entirely and substituted with a
 single name (generally
\emph on
 args*
\family typewriter
\emph default
 
\family default
by convention), which will then contain a list of any and all values passed
 to the function.
 The second method is the use of the dot (.) in the body of the arguments
 list followed by a single variable (usually called 
\emph on
rest
\emph default
).
\end_layout

\begin_layout LyX-Code
(let ((
\emph on
name value
\emph default
) ...) 
\emph on
body
\emph default
 ...)
\end_layout

\begin_layout Standard
Binds the given name-value pairs for use in the local context created by
 the body of the expression.
 This is used to define local variables, such as are needed within a function.
 Note that local functions can potentially be assigned this way by storing
 anonymous functions, but there is a built-in syntax for defining a single
 such function, like so:
\end_layout

\begin_layout LyX-Code
(let 
\emph on
proc
\emph default
 ((
\emph on
name value) ...
\emph default
) 
\emph on
body ...
\emph default
)
\end_layout

\begin_layout Standard
When 
\emph on
let
\emph default
 is called this way, it defines a local function 
\emph on
proc
\emph default
 (conventionally called 
\emph on
recur
\emph default
), which can then be called from within the body of the 
\emph on
let
\emph default
 in order to perform local recursion; the name-value pairs thus act as arguments
 to the function 
\emph on
proc
\emph default
.
 
\end_layout

\begin_layout LyX-Code
(fn ([
\emph on
arg ...
\emph default
]) 
\emph on
body ...
\emph default
)
\end_layout

\begin_layout Standard
Creates an anonymous function with the given arguments, that evaluates its
 body when called.
 This is the 
\emph on
lambda
\emph default
 expression from other Lisps and functional languages, and a given 
\emph on
fn
\emph default
 can be passed as a value (as can named functions, for that matter) wherever
 called for.
 An anonymous function can also be evaluated directly in place by using
 it as the operator in an expression, like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> ((fn (x y) (* x y)) 4 5)
\end_layout

\begin_layout Plain Layout

20
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Conditionals and Loops
\end_layout

\begin_layout LyX-Code
(if 
\emph on
test
\emph default
 then 
\emph on
texpr 
\emph default
else 
\emph on
fexpr
\emph default
)
\end_layout

\begin_layout Standard
Evalutes 
\emph on
test
\emph default
 and, if 
\emph on
test 
\emph default
is True, evaluates 
\emph on
texpr
\emph default
, otherwise it evaluates 
\emph on
fexpr.

\emph default
 Note that only a single expression can be placed in each 
\begin_inset Quotes eld
\end_inset

slot
\begin_inset Quotes erd
\end_inset

 in the syntax; if you need to do multiple things, use a 
\emph on
do
\emph default
 block.
 
\end_layout

\begin_layout LyX-Code
(select (
\emph on
test1 expr1) ...
 
\emph default
[(else 
\emph on
fexpr
\emph default
)])
\end_layout

\begin_layout Standard
Given a list of test-expression pairs, evaluates the tests in order until
 it finds one which is True, and evaluates the matching expression.
 The 
\emph on
else
\emph default
 expression is always true: if an else is found at the end of the 
\emph on
select
\emph default
 statement, its matching 
\emph on
fexpr
\emph default
 will be evaluated.
 If no test in 
\emph on
select
\emph default
 is true, returns 
\emph on
#<void>.
\end_layout

\begin_layout LyX-Code
(select case 
\emph on
texpr 
\emph default
((
\emph on
val ...
\emph default
) 
\emph on
rexpr
\emph default
) ...
 [(else 
\emph on
fexpr
\emph default
)])
\end_layout

\begin_layout Standard
Evaluates 
\emph on
texpr 
\emph default
and compares it to 
\emph on
vals
\emph default
 in turn until it finds a value that is 
\emph on
eq?
\emph default
 to the result of 
\emph on
texpr.
 
\emph default
If one is found, it evaluates the matching 
\emph on
rexpr
\emph default
.
 Like with 
\emph on
select
\emph default
, 
\emph on
else
\emph default
 is always considered True, and will therefore always evaluate its 
\emph on
fexpr.
 
\emph default
If no matching 
\emph on
val
\emph default
 is found, 
\emph on
select case
\emph default
 evaluates to 
\emph on
#<void>.

\emph default
 Not also that the 
\emph on
(val ...) 
\emph default
is a list, and can contain as many values as is needed, such as in the following
 example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> (select case (* 2 3)
\end_layout

\begin_layout Plain Layout

    ((2 3 4) (print "Nope."))
\end_layout

\begin_layout Plain Layout

    ((5 6 7) (print "Yup."))
\end_layout

\begin_layout Plain Layout

    (else (print "something is horribly wrong.")))
\end_layout

\begin_layout Plain Layout

Yup.
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(for (
\emph on
var 
\emph default
in 
\emph on
list
\emph default
 [with 
\emph on
cry
\emph default
]) 
\emph on
body ...
\emph default
)
\end_layout

\begin_layout Standard
Iterates over 
\emph on
list
\emph default
 evaluating it's body with the 
\emph on
head
\emph default
 of 
\emph on
list 
\emph default
assigned to 
\emph on
var
\emph default
, then recurs with the 
\emph on
tail
\emph default
 of 
\emph on
list
\emph default
 until it returns Null.
 
\emph on
for 
\emph default
loops declare an implicit variable 
\emph on
cry 
\emph default
which can be passed a value with 
\emph on
carry.
 
\emph default
They may also be interrupted with 
\emph on
break.
 
\emph default
See below for more details.
\end_layout

\begin_layout LyX-Code
(do 
\emph on
body ...
\emph default
)
\end_layout

\begin_layout Standard
Evaluates its body in order, returning the result of the final body expression.
\end_layout

\begin_layout LyX-Code
(do loop [with 
\emph on
cry
\emph default
] 
\emph on
body ...
\emph default
)
\end_layout

\begin_layout Standard
Evaluates 
\emph on
body
\emph default
 repeatedly until a 
\emph on
break
\emph default
 statement is encountered.
 Declares the implicit variable 
\emph on
cry, 
\emph default
which can be reassigned with the 
\emph on
carry 
\emph default
operator
\emph on
.
\end_layout

\begin_layout LyX-Code
(break [
\emph on
value
\emph default
])
\end_layout

\begin_layout Standard
Breaks the continuation of a 
\emph on
for 
\emph default
or 
\emph on
do loop
\emph default
 evaluation.
 If provided a value, returns that value as the result of the loop.
\end_layout

\begin_layout LyX-Code
(carry 
\emph on
value
\emph default
)
\end_layout

\begin_layout Standard
When called in the body of a 
\emph on
for 
\emph default
or 
\emph on
do loop
\emph default
 expression, immediately begins the next iteration of the loop, and passes
 the given value to the implicit variable 
\emph on
cry
\emph default
.
\end_layout

\begin_layout LyX-Code
cry
\end_layout

\begin_layout Standard
Loops declare an internal variable called 
\emph on
cry, 
\emph default
which defaults to Null, and which is passed automatically to the next iteration
 of the loop, and is returned when the loop concludes.
 The value of 
\emph on
cry
\emph default
 can be specified at the beginning of the loop with the optional 
\emph on
with 
\emph default
parameter, and 
\emph on
carry 
\emph default
can be used to pass a new value of 
\emph on
cry 
\emph default
to the next iteration.
\end_layout

\begin_layout Subsection
Predicates and Logic
\end_layout

\begin_layout LyX-Code
(list? 
\emph on
v
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
v
\emph default
 is a list.
\end_layout

\begin_layout LyX-Code
(null? 
\emph on
v
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
v
\emph default
 is Null, where Null is defined as the empty list 
\family typewriter
'()
\family default
.
\end_layout

\begin_layout LyX-Code
(zero? 
\emph on
v
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
v
\emph default
 = 0.
\end_layout

\begin_layout LyX-Code
(one? 
\emph on
v
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
v = 1.
\end_layout

\begin_layout LyX-Code
(eq? 
\emph on
x y
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
x 
\emph default
and 
\emph on
y
\emph default
 are the same object.
\end_layout

\begin_layout LyX-Code
(equal? 
\emph on
x y
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
x
\emph default
 and 
\emph on
y
\emph default
 are equal.
\end_layout

\begin_layout LyX-Code
(symbol? 
\emph on
v
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
v
\emph default
 is a symbol: ie.
 a quoted name such as 
\emph on
'foo.

\emph default
 See 
\emph on
quote
\emph default
 in 3.4.
\end_layout

\begin_layout LyX-Code
(atom? 
\emph on
v
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
v
\emph default
 is an atom: ie.
 a number, symbol, or procedure, rather than another list or Null.
\end_layout

\begin_layout LyX-Code
(lat? 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
l
\emph default
 is a list composed solely of atoms.
\end_layout

\begin_layout LyX-Code
(and 
\emph on
expr ...
\emph default
)
\end_layout

\begin_layout Standard
Returns True only if all given expressions are True.
 
\end_layout

\begin_layout LyX-Code
(or 
\emph on
expr
\emph default
 ...)
\end_layout

\begin_layout Standard
Returns True if any given expression is True.
 
\end_layout

\begin_layout LyX-Code
(not 
\emph on
v
\emph default
)
\end_layout

\begin_layout Standard
Returns True if 
\emph on
v
\emph default
 is False, else returns False.
\end_layout

\begin_layout LyX-Code
else 
\end_layout

\begin_layout Standard
A special keyword for True, used as a literal in conditional statements.
\end_layout

\begin_layout LyX-Code
True 
\end_layout

\begin_layout Standard
The boolean truth value.
 Actually an alias for #t in the Racket implementation.
 Note that, in Heresy, as in Racket, anything not explicitly False is considered
 True.
\end_layout

\begin_layout LyX-Code
False
\end_layout

\begin_layout Standard
The boolean false value.
 Actually an alias for #f in the Racket implementation.
\end_layout

\begin_layout LyX-Code
Null
\end_layout

\begin_layout Standard
An alias for the empty list
\family typewriter
 '()
\family default
.
\end_layout

\begin_layout Subsection
Syntax and Evaluation
\end_layout

\begin_layout LyX-Code
(quote 
\emph on
v
\emph default
)
\end_layout

\begin_layout LyX-Code
'
\emph on
v
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Quotes
\begin_inset Quotes erd
\end_inset

 the given 
\emph on
v, 
\emph default
without evaluating it's contents.
 A quoted list is passed merely as data, a quoted atom is a 
\begin_inset Quotes eld
\end_inset

symbol
\begin_inset Quotes erd
\end_inset

 as per 
\emph on
symbol?.
 
\emph default
Can be shortened to 
\family typewriter
'
\family default
.
 
\end_layout

\begin_layout LyX-Code
(quasiquote 
\emph on
v
\emph default
)
\end_layout

\begin_layout LyX-Code
`
\emph on
v
\end_layout

\begin_layout Standard
Same as 
\emph on
quote,
\emph default
 but can be 
\begin_inset Quotes eld
\end_inset

escaped
\begin_inset Quotes erd
\end_inset

 with the 
\emph on
unquote
\emph default
 and 
\emph on
unquote-splicing
\emph default
 syntax.
 Can be shortened to 
\family typewriter
`
\family default
.
\end_layout

\begin_layout LyX-Code
(unquote 
\emph on
v
\emph default
)
\end_layout

\begin_layout LyX-Code
,
\emph on
v
\end_layout

\begin_layout Standard
When encountered within a a quasiquoted block, evaluates 
\emph on
v 
\emph default
and quotes its value instead.
 Can be shortened to 
\family typewriter
,
\family default
.
\end_layout

\begin_layout LyX-Code
(unquote-splicing 
\emph on
v
\emph default
)
\end_layout

\begin_layout LyX-Code
,@
\emph on
v
\end_layout

\begin_layout Standard
Similar to 
\emph on
unquote,
\emph default
 but splices the result of evaluating 
\emph on
v
\emph default
 in place.
 Can be shortened to 
\family typewriter
,@
\family default
.
\end_layout

\begin_layout LyX-Code
(error [
\emph on
symbol
\emph default
] 
\emph on
message
\emph default
)
\end_layout

\begin_layout Standard
Halts the program, returning an error of 
\emph on
symbol: message
\emph default
 where 
\emph on
symbol 
\emph default
is a quoted value (customarily the name of the current function) and 
\emph on
message 
\emph default
is a string.
 
\end_layout

\begin_layout LyX-Code
(run 
\emph on
form
\emph default
)
\end_layout

\begin_layout Standard
Evaluates the given form.
 Usage is not recommended.
\end_layout

\begin_layout LyX-Code
(rem 
\emph on
any ...
\emph default
)
\end_layout

\begin_layout Standard
Ignores its arguments and returns void.
 Useful for block comments.
 
\end_layout

\begin_layout LyX-Code
(def macro 
\emph on
name 
\emph default
([
\emph on
pattern ...
\emph default
]) 
\emph on
template ...
\emph default
)
\end_layout

\begin_layout Standard
Defines a new macro with 
\emph on
name
\emph default
.
 A macro can best be thought of as a function which is not evaluated, but
 rather returns syntax to be evaluated in the form of a template.
 Each name described in the 
\emph on
pattern
\emph default
 defines a 
\begin_inset Quotes eld
\end_inset

pattern variable
\begin_inset Quotes erd
\end_inset

 which can then be used in the body of the 
\emph on
template
\emph default
 and will pass any syntax contained in that portion of the 
\emph on
pattern 
\emph default
in the appropriate location matched in the 
\emph on
template.

\emph default
 The elipsis ...
 can be used in a pattern to indicate repeatable values.
\end_layout

\begin_layout LyX-Code
(apply 
\emph on
fun v ...
 lst
\emph default
)
\end_layout

\begin_layout Standard
Applies 
\emph on
fun
\emph default
 to the given arguments, as if it had been called with 
\family typewriter
(fun v ...
 lst)
\family default
.
\end_layout

\begin_layout Subsection
Input and Output
\end_layout

\begin_layout LyX-Code
(print [&|lit] [
\emph on
v
\emph default
])
\end_layout

\begin_layout Standard
Prints the given 
\emph on
v
\emph default
 to the current output, or stdout if not otherwise specified, followed by
 a newline.
 
\emph on
(print & v)
\emph default
 outputs without a newline, while 
\emph on
(print lit v)
\emph default
 outputs as a literal form that can be directly read back by 
\emph on
(input stx ...)
\emph default
 as code.
 A bare 
\emph on
(print)
\emph default
 merely prints a newline to the current output.
 
\end_layout

\begin_layout LyX-Code
(? ...)
\end_layout

\begin_layout Standard
A shortened macro for 
\emph on
print.
\end_layout

\begin_layout LyX-Code
(input [stx] [
\emph on
string
\emph default
])
\end_layout

\begin_layout Standard
Reads a line of input from the current input, or stdin if not otherwise
 specified, and returns the value read as a string.
 
\emph on
(input stx ...)
\emph default
 instead reads a value using the standard reader, thus providing syntax
 which can be evaluated with 
\emph on
run
\emph default
.
 If additionally provided with a 
\emph on
string,
\emph default
 this will be output as a prompt to the current output.
\end_layout

\begin_layout LyX-Code
(using 
\emph on
io-port body ...
\emph default
)
\end_layout

\begin_layout Standard
Evaluates the body, with input/ouptut redirected to the given 
\emph on
io-port.
 
\emph default
Only the 
\emph on
file
\emph default
 port is supported at this time.
\end_layout

\begin_layout LyX-Code
(file 
\emph on
name
\emph default
 as 
\emph on
mode
\emph default
)
\end_layout

\begin_layout Standard
Opens the file 
\emph on
name 
\emph default
as the new target for input or output, depending on the 
\emph on
mode
\emph default
 provided
\emph on
.

\emph default
 
\emph on
mode 
\emph default
is a symbol, of one of the following:
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
'output
\family default
 Opens file as the current output port.
 Will fail if file already exists.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
'rewrite
\family default
 Opens file as the current output port, rewriting its contents if the file
 exists.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
'input
\family default
 Opens file as the current input port.
 
\end_layout

\begin_layout Subsection
Lists
\end_layout

\begin_layout LyX-Code
(list 
\emph on
v ...
\emph default
)
\end_layout

\begin_layout Standard
Returns a list containing the given values.
\end_layout

\begin_layout LyX-Code
(join 
\emph on
a b
\emph default
)
\end_layout

\begin_layout Standard
Joins 
\emph on
a 
\emph default
and 
\emph on
b
\emph default
 into a pair.
 If 
\emph on
b
\emph default
 is Null, a list is created containing 
\emph on
a
\emph default
.
 If 
\emph on
b
\emph default
 is a list, 
\emph on
a 
\emph default
is joined to the head of the list.
 
\end_layout

\begin_layout LyX-Code
(head 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Returns the head (first element) of the list 
\emph on
l
\emph default
.
 
\end_layout

\begin_layout LyX-Code
(tail 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Returns the remainder of list 
\emph on
l
\emph default
 after the 
\emph on
head.

\emph default
 If the list has only one element, returns Null.
\end_layout

\begin_layout LyX-Code
(range 
\emph on
start
\emph default
 to 
\emph on
finish
\emph default
 [step 
\emph on
n
\emph default
])
\end_layout

\begin_layout Standard
Generates a list of numbers, incrementing from 
\emph on
start
\emph default
 to 
\emph on
finish
\emph default
 by 
\emph on
n.
 
\emph default
If no 
\emph on
n 
\emph default
is provided, defaults to 1.
 Note that, unlike BASIC's 
\emph on
for x = y to z, 
\emph default
descending sequences where 
\emph on
start
\emph default
 is greater than 
\emph on
finish 
\emph default
can only be declared by including a negative 
\emph on
n.
 
\emph default
Otherwise only Null will be returned.
 
\end_layout

\begin_layout LyX-Code
(map 
\emph on
fun l
\emph default
)
\end_layout

\begin_layout Standard
Given a single-argument function 
\emph on
fun, 
\emph default
returns a list with 
\emph on
fun 
\emph default
applied to each item in 
\emph on
l.
\end_layout

\begin_layout LyX-Code
(filter 
\emph on
fun
\emph default
 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Given a predicate 
\emph on
fun
\emph default
, returns a new list containing only those elements of 
\emph on
l 
\emph default
for which 
\emph on
fun
\emph default
 returns True.
\end_layout

\begin_layout LyX-Code
(len 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Returns the number of items in 
\emph on
l.
\end_layout

\begin_layout LyX-Code
(foldr 
\emph on
fun base l
\emph default
)
\end_layout

\begin_layout Standard
Given a function 
\emph on
fun
\emph default
 with two arguments, returns the cumulative result of 
\emph on
fun 
\emph default
being applied to consecutive pairs, starting from 
\emph on
base
\emph default
 and the rightmost element of 
\emph on
l.
\end_layout

\begin_layout LyX-Code
(foldl 
\emph on
fun base l
\emph default
)
\end_layout

\begin_layout Standard
Similar to 
\emph on
foldr, 
\emph default
except that it combines pairs from the left, starting with the head of 
\emph on
l 
\emph default
and 
\emph on
base.
\end_layout

\begin_layout LyX-Code
(reverse 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Returns a list with the order of 
\emph on
l 
\emph default
reversed.
\end_layout

\begin_layout LyX-Code
(index 
\emph on
n l
\emph default
)
\end_layout

\begin_layout Standard
Returns the 
\emph on
n
\emph default
th entry of 
\emph on
l, 
\emph default
indexed from 1.
\end_layout

\begin_layout LyX-Code
(index* 
\emph on
l dims ...
\emph default
)
\end_layout

\begin_layout Standard
Walks through nested lists according to the given 
\emph on
dims
\emph default
, essentially finding 
\emph on
index
\emph default
 recursively for an arbitrary number of dimensions.
 For example, given a nested list three lists deep, 
\emph on
(index* l 2 3 1) 
\emph default
would return the 1st element of the third element of the 2nd lst, like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> (def dave '(1 (2 3 (4 5)) 6))
\end_layout

\begin_layout Plain Layout

> (index* dave 2 3 1)
\end_layout

\begin_layout Plain Layout

4
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(inlst 
\emph on
item
\emph default
 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Searches 
\emph on
l
\emph default
 for 
\emph on
item
\emph default
, returning the index of 
\emph on
item
\emph default
 if found, or False if not.
\end_layout

\begin_layout LyX-Code
(left 
\emph on
l n
\emph default
)
\end_layout

\begin_layout Standard
Returns a list of the leftmost 
\emph on
n
\emph default
 elements of 
\emph on
l.
\end_layout

\begin_layout LyX-Code
(right 
\emph on
l n)
\end_layout

\begin_layout Standard
Returns a list of the rightmost 
\emph on
n 
\emph default
elements of 
\emph on
l.
\end_layout

\begin_layout LyX-Code
(mid 
\emph on
l idx n
\emph default
)
\end_layout

\begin_layout Standard
Returns 
\emph on
n 
\emph default
entries of 
\emph on
l
\emph default
 starting from index 
\emph on
idx
\emph default
.
\end_layout

\begin_layout LyX-Code
(slice 
\emph on
l first
\emph default
 [
\emph on
last
\emph default
])
\end_layout

\begin_layout Standard
Returns a slice of 
\emph on
l
\emph default
, starting at 
\emph on
first
\emph default
 and ending at 
\emph on
last
\emph default
.
 If 
\emph on
last
\emph default
 is not provided, it defaults to the end of the list.
\end_layout

\begin_layout LyX-Code
(append1 
\emph on
l1 l2
\emph default
)
\end_layout

\begin_layout Standard
Returns a list with 
\emph on
l2 
\emph default
appended to the end of 
\emph on
l1.
\end_layout

\begin_layout LyX-Code
(append 
\emph on
l
\emph default
 ...)
\end_layout

\begin_layout Standard
Returns a list of the given 
\emph on
l
\emph default
s appended together in order.
 
\end_layout

\begin_layout LyX-Code
(assoc 
\emph on
tgt l
\emph default
)
\end_layout

\begin_layout Standard
Searches the heads of a list of lists 
\emph on
l
\emph default
 and returns the first matching list or False.
\end_layout

\begin_layout LyX-Code
(subst 
\emph on
tgt new l
\emph default
)
\end_layout

\begin_layout Standard
Searches the heads of a list of lists 
\emph on
l, 
\emph default
and if it finds 
\emph on
tgt
\emph default
, returns a new list with the tail of 
\emph on
tgt
\emph default
 substituted for 
\emph on
new
\emph default
.
 Otherwise, returns False.
\end_layout

\begin_layout LyX-Code
(heads 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Returns a list of the heads of a list of lists.
 
\end_layout

\begin_layout LyX-Code
(sort 
\emph on
fun l
\emph default
)
\end_layout

\begin_layout Standard
Sorts list 
\emph on
l 
\emph default
according to the comparison function 
\emph on
fun
\emph default
.
\end_layout

\begin_layout LyX-Code
(zip 
\emph on
l1 l2
\emph default
)
\end_layout

\begin_layout Standard
Returns a new list of lists combining 
\emph on
l1 
\emph default
and 
\emph on
l2.
 
\emph default
Excess length of either list is dropped.
\end_layout

\begin_layout LyX-Code
(zipwith 
\emph on
fun l1 l2
\emph default
)
\end_layout

\begin_layout Standard
Returns a new list, combining the matching pairs of each list with 
\emph on
fun.
 
\emph default
Excess length of either list is dropped.
\end_layout

\begin_layout Subsection
Strings
\end_layout

\begin_layout LyX-Code
(=$ 
\emph on
x y
\emph default
)
\end_layout

\begin_layout Standard
Returns True if the two strings are equal.
\end_layout

\begin_layout LyX-Code
(& 
\emph on
str ...
\emph default
)
\end_layout

\begin_layout Standard
Concatenates its arguments into a single string.
\end_layout

\begin_layout LyX-Code
(list$ 
\emph on
str
\emph default
)
\end_layout

\begin_layout Standard
Returns a list of one-character strings from the given string.
\end_layout

\begin_layout LyX-Code
(str$ 
\emph on
n
\emph default
)
\end_layout

\begin_layout Standard
Converts a number 
\emph on
n
\emph default
 to a string.
\end_layout

\begin_layout LyX-Code
(empty$? 
\emph on
str
\emph default
)
\end_layout

\begin_layout Standard
Returns True if the string is empty (
\family typewriter

\begin_inset Quotes eld
\end_inset


\begin_inset Quotes erd
\end_inset


\family default
).
\end_layout

\begin_layout LyX-Code
(len$ 
\emph on
str
\emph default
)
\end_layout

\begin_layout Standard
Returns the length of the string, indexed from 1.
\end_layout

\begin_layout LyX-Code
(list& 
\emph on
l
\emph default
)
\end_layout

\begin_layout Standard
Given a list of strings, returns a single concatenated string.
\end_layout

\begin_layout LyX-Code
(head$ 
\emph on
str
\emph default
)
\end_layout

\begin_layout Standard
Returns the head (first character) of the string.
\end_layout

\begin_layout LyX-Code
(tail$ 
\emph on
str
\emph default
)
\end_layout

\begin_layout Standard
Returns the tail (remaining characters) of the string, unless 
\emph on
str
\emph default
 is empty, in which case it returns the empty string.
\end_layout

\begin_layout LyX-Code
(left$ 
\emph on
str
\emph default
 
\emph on
n
\emph default
)
\end_layout

\begin_layout Standard
Returns a string of the leftmost 
\emph on
n
\emph default
 characters of 
\emph on
str.
\end_layout

\begin_layout LyX-Code
(right$ 
\emph on
str n
\emph default
)
\end_layout

\begin_layout Standard
Returns a string of the rightmost 
\emph on
n 
\emph default
characters of 
\emph on
str.
\end_layout

\begin_layout LyX-Code
(mid$ 
\emph on
str idx len
\emph default
)
\end_layout

\begin_layout Standard
Returns a section of 
\emph on
str, len 
\emph default
characters long, beginning at 
\emph on
idx.
\end_layout

\begin_layout LyX-Code
(slice$ 
\emph on
str start 
\emph default
[
\emph on
finish
\emph default
])
\end_layout

\begin_layout Standard
Returns a slice of 
\emph on
str 
\emph default
beginning at 
\emph on
start
\emph default
 and ending at 
\emph on
finish
\emph default
.
 If not specified, 
\emph on
finish
\emph default
 defaults to the length of the string.
 
\end_layout

\begin_layout LyX-Code
(instr 
\emph on
str
\emph default
 
\emph on
search
\emph default
)
\end_layout

\begin_layout Standard
Returns the index of the first instance of 
\emph on
search
\emph default
 in 
\emph on
str
\emph default
, or False if not found.
\end_layout

\begin_layout LyX-Code
(split 
\emph on
str 
\emph default
[
\emph on
delimiters
\emph default
])
\end_layout

\begin_layout Standard
Returns a list of string sections split at the given delimiters.
 If 
\emph on
delimiters 
\emph default
is not specified, defaults to space (
\family typewriter

\begin_inset Quotes eld
\end_inset

 
\begin_inset Quotes eld
\end_inset


\family default
).
\end_layout

\begin_layout Subsection
Math
\end_layout

\begin_layout LyX-Code
(+ [
\emph on
x y ...
\emph default
])
\end_layout

\begin_layout Standard
Adds the given numbers left to right and returns the result.
 If only one argument is given, returns the argument.
 If no arguments are provided, returns 0.
\end_layout

\begin_layout LyX-Code
(- 
\emph on
x 
\emph default
[
\emph on
y ...
\emph default
]) 
\end_layout

\begin_layout Standard
Subtracts the given numbers left to right and returns the result.
 If only one argument is given, returns 
\emph on
(- 0 x).
 
\end_layout

\begin_layout LyX-Code
(/ 
\emph on
x 
\emph default
[
\emph on
y ...
\emph default
])
\end_layout

\begin_layout Standard
Divides the numbers from left to right and returns the result.
 If only one argument is given, returns 
\emph on
(/ 1 x)
\emph default
.
 
\end_layout

\begin_layout LyX-Code
(* [
\emph on
x y ...
\emph default
])
\end_layout

\begin_layout Standard
Multiplies the numbers given from left to right and returns the result.
 If no argument is given, returns one.
 If one argument is given, returns the argument.
 
\end_layout

\begin_layout LyX-Code
(= 
\emph on
x y ...
\emph default
)
\end_layout

\begin_layout Standard
Returns True if all the numbers are numerically equal.
\end_layout

\begin_layout LyX-Code
(< 
\emph on
x y ...
\emph default
)
\end_layout

\begin_layout Standard
Returns True if all arguments are greater than the one previous going right
 (ie, 
\emph on
x < y < z, etc.
\emph default
)
\end_layout

\begin_layout LyX-Code
(> 
\emph on
x y ...
\emph default
)
\end_layout

\begin_layout Standard
Returns True if all arguments are less than the one previous going right
 (ie, 
\emph on
x > y > z, etc.
\emph default
)
\end_layout

\begin_layout LyX-Code
pi
\end_layout

\begin_layout Standard
A bound variable containing the 64-bit floating point value of pi.
\end_layout

\begin_layout LyX-Code
e
\end_layout

\begin_layout Standard
A bound variable containing the 64-bit floating point value of Euler's number.
 
\end_layout

\begin_layout LyX-Code
(mod 
\emph on
x y
\emph default
)
\end_layout

\begin_layout Standard
Returns the modulus of 
\emph on
x
\emph default
 divided by 
\emph on
y
\emph default
.
\end_layout

\begin_layout LyX-Code
(abs 
\emph on
n
\emph default
)
\end_layout

\begin_layout Standard
Returns the absolute value of 
\emph on
n.
\end_layout

\begin_layout LyX-Code
(even? 
\emph on
n
\emph default
) 
\end_layout

\begin_layout Standard
Returns True if 
\emph on
n
\emph default
 is even.
\end_layout

\begin_layout LyX-Code
(odd?
\emph on
 n
\emph default
) 
\end_layout

\begin_layout Standard
Returns True if 
\emph on
n
\emph default
 is odd.
\end_layout

\begin_layout LyX-Code
(sgn 
\emph on
n
\emph default
)
\end_layout

\begin_layout Standard
Returns -1 if 
\emph on
n 
\emph default
is negative, 0 if 
\emph on
n
\emph default
 is zero, and 1 if 
\emph on
n
\emph default
 is positive.
\end_layout

\begin_layout LyX-Code
(inc 
\emph on
n
\emph default
)
\end_layout

\begin_layout Standard
Returns the value of 
\emph on
(+ n 1).
\end_layout

\begin_layout LyX-Code
(dec 
\emph on
n
\emph default
)
\end_layout

\begin_layout Standard
Returns the value of 
\emph on
(- n 1)
\emph default
.
\end_layout

\begin_layout LyX-Code
(exp 
\emph on
x
\emph default
)
\end_layout

\begin_layout Standard
Returns the value of 
\emph on
e
\begin_inset script superscript

\begin_layout Plain Layout
x
\end_layout

\end_inset

.
\end_layout

\begin_layout LyX-Code
(sin 
\emph on
x
\emph default
)
\end_layout

\begin_layout Standard
Returns the sine of 
\emph on
x
\emph default
 as a floating point value.
\end_layout

\begin_layout LyX-Code
(cos 
\emph on
x
\emph default
)
\end_layout

\begin_layout Standard
Returns the cosine of 
\emph on
x
\emph default
 as a floating point value.
\end_layout

\begin_layout LyX-Code
(tan
\emph on
 x
\emph default
)
\end_layout

\begin_layout Standard
Returns the tangent of 
\emph on
x
\emph default
 as a floating point value.
\end_layout

\begin_layout Subsection
Random Numbers
\end_layout

\begin_layout Standard
Heresy's random number generator operates slightly differently to traditional
 BASIC's, in order to offer a more functional approach.
 Rather than defining a single global seed which the RND function then refers
 to, Heresy's 
\emph on
randomize
\emph default
 returns a 
\begin_inset Quotes eld
\end_inset

generator
\begin_inset Quotes erd
\end_inset

 function with a given seed, allowing one to name and seed as many generators
 as one needs, though for practical purposes a default RND is still provided
 which is automatically created and seeded with a derivation of the current
 time in milliseconds..
\end_layout

\begin_layout LyX-Code
(randomize [
\emph on
seed
\emph default
])
\end_layout

\begin_layout Standard
Returns a new generator function initialized with seed.
 If no seed is provided, defaults to 
\emph on
timer
\emph default
.
\end_layout

\begin_layout LyX-Code
(rnd)
\end_layout

\begin_layout Standard
A pre-defined generator which returns a random number between 0 and 1, exclusive
, seeded by 
\emph on
timer
\emph default
.
\end_layout

\begin_layout LyX-Code
timer
\end_layout

\begin_layout Standard
A special internal variable which contains the current time in milliseconds.
\end_layout

\begin_layout Subsection
Things
\end_layout

\begin_layout Standard
Things are Heresy's definable data structures.
 Unlike the objects of most object-oriented languages, which often exist
 to hold and carry mutable state and actions with which to change that state,
 Things are immutable.
 A Thing, once sprung to life, cannot itself be altered, but can be called
 with the correct syntax to return a new Thing with different internal values
 for its internal data fields.
\end_layout

\begin_layout Standard
Things are essentially functions, lambdas specifically, with predefined
 syntax arguments.
 They are first class values, and can be passed freely just as any other
 data, but can also be passed arguments to either return the values of their
 fields, return a new Thing, or to employ any functions contained within
 the thing.
 
\end_layout

\begin_layout LyX-Code
(describe 
\emph on
Name 
\emph default
(
\emph on
field value
\emph default
) ...)
\end_layout

\begin_layout Standard
Defines a new type of Thing, given 
\emph on
Name
\emph default
.
 By convention, Things are generally named in uppercase, though this is
 not required by the syntax.
 Each 
\emph on
field
\emph default
 is an internal name and external symbol, which is mapped to the given 
\emph on
value.
 
\emph default
Anonymous functions (
\emph on
fn
\emph default
) can be assigned as values to Thing fields, and those functions can access
 the fields of the Thing by name.
\end_layout

\begin_layout LyX-Code
({Name} [
\emph on
'symbol
\emph default
|'fields|
\emph on
pattern
\emph default
])
\end_layout

\begin_layout Standard
Once a Thing has been described or bound to a name by other means, that
 
\emph on
Name 
\emph default
is bound locally as a function, and can thus be called with special syntax
 to return its contents or to return a new copied Thing.
 In more detail, these syntaxes are as follows:
\end_layout

\begin_layout LyX-Code
(Name)
\end_layout

\begin_layout Standard
Returns an association list containing the contents of the Thing, ie.
 a list in the form of: 
\emph on
'((field value) ...)
\end_layout

\begin_layout LyX-Code
(Name 'fields)
\end_layout

\begin_layout Standard
Returns a list of symbols for the fields contained within the Thing.
 Note that the symbol 
\emph on
'fields
\emph default
 takes precedent over the field names within, in order to prevent overwriting
 this syntax.
 
\end_layout

\begin_layout LyX-Code
(Name 
\emph on
'symbol
\emph default
)
\end_layout

\begin_layout Standard
Returns the value of the field associated with 
\emph on
'symbol,
\emph default
 the quoted form of the field name described when the Thing type was first
 declared.
 Will return an error if no such named field is found.
 If the value associated with symbol is a function, this expression can
 be used as the operating function of a further expression like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> (describe Lord-Cthulhu (eat (fn (x) (print (& "Devours " x)))))
\end_layout

\begin_layout Plain Layout

> ((Lord-Cthulhu 'eat) "Dave")
\end_layout

\begin_layout Plain Layout

Devours Dave
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(Name 
\emph on
pattern
\emph default
)
\end_layout

\begin_layout LyX-Code
pattern = '([*|
\emph on
value
\emph default
] ...)
\end_layout

\begin_layout Standard
Returns a copy of the Thing, with new values according to the 
\emph on
pattern
\emph default
 passed to the original Thing.
 
\emph on
Pattern
\emph default
 must be a quoted list of either *'s or values, in order according to the
 fields of the Thing as originally defined (so the first *|value matches
 the first field, the second to the second field, and so on).
 A * in a field indicates that the value is copied in-tact, while a 
\emph on
value
\emph default
 becomes the new value of the field in that position.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> (describe Santa (size 'fat)
\end_layout

\begin_layout Plain Layout

				  (sleigh 'ready)
\end_layout

\begin_layout Plain Layout

				  (sack 'full))
\end_layout

\begin_layout Plain Layout

> (describe Santa-after-Christmas (Santa '(* * 'empty)))
\end_layout

\begin_layout Plain Layout

> (Santa-after-Christmas)
\end_layout

\begin_layout Plain Layout

((size 'fat) (sleigh 'ready) (sack 'empty))
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(send 
\emph on
Thing 'symbol args ...
\emph default
)
\end_layout

\begin_layout Standard
An alternate syntax for accessing functions within Things, 
\emph on
send 
\emph default
calls the function named by 
\emph on
(Thing 'symbol)
\emph default
 with the given arguments and returns the result.
 
\end_layout

\begin_layout LyX-Code
(Self ...)
\end_layout

\begin_layout Standard

\emph on
Self 
\emph default
is the self-referring identifier for a Thing, allowing for functions within
 Things to call the Thing itself.
 Note that if it is only the values of the other fields, this is not necessary,
 as fields are defined as local names within the context of the Thing, and
 thus can be referred to simply by name.
\end_layout

\begin_layout Subsection
Theory
\end_layout

\begin_layout LyX-Code
(Y 
\emph on
fn
\emph default
)
\end_layout

\begin_layout Standard
The strict Y fixed-point combinator.
 Allows for recursion of anonymous functions.
 Given a 
\emph on
fn1 
\emph default
which contains a single named argument, and within which is an additional
 single-argument 
\emph on
fn
\emph default
2, the innermost 
\emph on
fn2
\emph default
 can call the named argument of 
\emph on
fn1
\emph default
 as if it were a function name in order to recur on itself.
 For example, the factorial function can be defined thusly, using the Y-combinat
or:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

(define Fact   
\end_layout

\begin_layout Plain Layout

  (Y     
\end_layout

\begin_layout Plain Layout

   (fn (fact)       
\end_layout

\begin_layout Plain Layout

    (fn (n)         
\end_layout

\begin_layout Plain Layout

      (if (zero? n)            
\end_layout

\begin_layout Plain Layout

          then 1             
\end_layout

\begin_layout Plain Layout

          else (* n (fact (- n 1))))))))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note however that usage of the Y-combinator for recursion is not especially
 efficient, and the more traditional recursive approach is generally recommended
 whenever possible (which is most of the time).
\end_layout

\begin_layout LyX-Code
(partial 
\emph on
fun args ...
\emph default
)
\end_layout

\begin_layout Standard
Returns a function with 
\emph on
args
\emph default
 partially applied to 
\emph on
fun, 
\emph default
which can then be passed the remaining arguments, as many as needed to complete
 the calculation.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> (map (partial + 2) (range 1 to 4))
\end_layout

\begin_layout Plain Layout

(3 4 5 6)
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
(compose 
\emph on
fn1 fn2
\emph default
)
\end_layout

\begin_layout Standard
Returns a new function which is a composition of 
\emph on
fn1 
\emph default
and 
\emph on
fn2.
 
\emph default
This function evaluates 
\emph on
fn2 
\emph default
with its arguments
\emph on
, 
\emph default
and then applies 
\emph on
fn1
\emph default
 to the result of 
\emph on
fn2.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

> (define abs-sub (compose abs -))
\end_layout

\begin_layout Plain Layout

> (abs-sub 4 5)
\end_layout

\begin_layout Plain Layout

1
\end_layout

\end_inset


\end_layout

\end_body
\end_document
